@page "/admin/products"
@using OnlineShop.Client.Services.State
@using OnlineShop.Core.DTO
@using System.Globalization
@inject IDialogService _dialogService

<style>
    .selected {
        background-color: @Colors.Indigo.Lighten1 !important;
    }

    .selected > td {
        color: white !important;
    }

    .selected > td .mud-input {
        color: white !important;
    }
</style>

<MudContainer>

    <MudTable T="ProductCard" Filter="@(new Func<ProductCard, bool>(FilterFunc))" Items="@Products" Hover="true" Striped="true" @bind-Ref="_table"
              SelectedItem="_selectedProduct" SelectedItemChanged="SelectionChanged"
              RowClassFunc="RowClassFunc">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Users</MudText>
            <MudSpacer/>
            <div class="d-flex align-center justify-lg-space-evenly px-2">
                <MudTextField Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" Class="mt-0"
                              IconSize="Size.Medium" Placeholder="Search" @bind-Value="searchString">
                </MudTextField>
                <MudButton Class="mx-4" OnClick="Drop" Variant="Variant.Filled" Color="Color.Secondary">Drop Selection</MudButton>
                <MudButtonGroup Class="mx-2" OverrideStyles="false">
                    <MudButton OnClick="Delete" Disabled="@_readOnly" DisableElevation="true" Variant="Variant.Filled" Color="Color.Error" StartIcon="@Icons.Filled.Delete">Delete</MudButton>
                    <MudButton OnClick="Edit" Disabled="@_readOnly" DisableElevation="true" Variant="Variant.Filled" Color="Color.Warning" StartIcon="@Icons.Filled.Edit">Edit</MudButton>
                    <MudButton OnClick="Create" DisableElevation="true" Variant="Variant.Filled" Color="Color.Success" StartIcon="@Icons.Filled.Add">New</MudButton>
                </MudButtonGroup>
            </div>
        </ToolBarContent>
        <HeaderContent>
            <MudTh>Id</MudTh>
            <MudTh>Name</MudTh>
            <MudTh>Price</MudTh>
            <MudTh>Vendor</MudTh>
            <MudTh>Category</MudTh>
            <MudTh>Rating</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Id">@context.Id</MudTd>
            <MudTd DataLabel="Name">@context.Name</MudTd>
            <MudTd DataLabel="Price">@FormatPrice(context.Price) ₽</MudTd>
            <MudTd DataLabel="Vendor">@context.Vendor.Name</MudTd>
            <MudTd DataLabel="Category">@context.Category.Type</MudTd>
            <MudTd DataLabel="Rating">@context.Rating</MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager/>
        </PagerContent>
    </MudTable>
</MudContainer>

@code {

    [CascadingParameter]
    public AppState AppState { get; set; }

    private List<ProductCard> Products;
    private MudTable<ProductCard> _table;

    private bool _readOnly = true;
    private bool _isCellEditMode;
    private bool _editTriggerRowClick;

    private string? searchString;
    private ProductCard? _selectedProduct;
    private DialogOptions DialogOptions = new DialogOptions() {MaxWidth = MaxWidth.ExtraLarge, CloseButton = true, DisableBackdropClick = true};


    protected override async Task OnInitializedAsync()
    {
        Products = await AppState.Product.FetchCards();
    }

    private string FormatPrice(Price price)
    {
        float priceValue = price.Discount == 0 ? price.Value : price.Value * price.Discount;
        var priceStr = priceValue.ToString(CultureInfo.CurrentCulture);

        double discount = Math.Round(price.Discount * 100, MidpointRounding.ToZero);
        string discountStr = discount.ToString(CultureInfo.CurrentCulture);

        return price.Discount == 0 ?
            priceStr :
            priceStr + $"(-{discountStr})";
    }

    private bool FilterFunc(ProductCard card)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (card.Id.ToString().Contains(searchString, StringComparison.Ordinal))
            return true;
        if (card.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (FormatPrice(card.Price).Contains(searchString, StringComparison.Ordinal))
            return true;
        return false;
    }

    private void SelectionChanged(object obj)
    {
        var productCard = obj as ProductCard;
        Console.WriteLine(obj);

        _readOnly = productCard == null && productCard != _selectedProduct;
        _selectedProduct = _readOnly ? null : productCard;
    }

    private string RowClassFunc(ProductCard card, int index)
    {
        if (_selectedProduct == card && index != -1)
            return "selected";
        else
            return string.Empty;
    }

    private void Drop()
    {
        _selectedProduct = null;
        _readOnly = false;
    }

    private async Task Create()
    {
        var parameters = new DialogParameters {["ActionText"] = "Создать"};
        var dialog = _dialogService.Show<ProductEditor>("Новый продукт", parameters, DialogOptions);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            var productCard = result.Data as ProductCard;
            Console.WriteLine(productCard);
        }
    }

    private async Task Edit()
    {
        var parameters = new DialogParameters {["Product"] = _selectedProduct, ["ActionText"] = "Сохранить"};
        var dialog = _dialogService.Show<ProductEditor>("Редактирование", parameters, DialogOptions);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            var productCard = result.Data as ProductCard;
            Console.WriteLine(productCard);
        }
    }

    private Task Delete()
    {
        throw new NotImplementedException();
    }

}