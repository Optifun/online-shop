@using OnlineShop.Core.DTO
@using OnlineShop.Client.Services.State
@using OnlineShop.Client.Components

<MudDialog>
    <DialogContent>
        <MudStack Row="true">
            <MudForm Model="@Value" @bind-Errors="@Errors" @bind-IsValid="IsValid">
                <MudStack Row="true">
                    <MudPaper Class="pa-4 ma-4" Elevation="3">
                        <MudText>Edit product</MudText>
                        <MudField Label="Id">@(Value.Id ?? 0)</MudField>
                        <MudTextField @bind-Value="Value.Name" Label="Name" For="@(() => Value.Name)" Required="true"></MudTextField>
                        <MudTextField @bind-Value="Value.Description" Label="Description" For="@(() => Value.Description)" Required="true"></MudTextField>

                        <MudSelect T="Vendor" Label="Vendor" For="@(() => Value.Vendor)" Required="true" @bind-Value="@Value.Vendor">
                            @foreach (var v in Vendors)
                            {
                                <MudSelectItem Value="v">@v.Name</MudSelectItem>
                            }
                        </MudSelect>

                        <MudSelect T="Category" Label="Category" For="@(() => Value.Category)" Required="true" @bind-Value="@Value.Category">
                            @foreach (var c in Categories)
                            {
                                <MudSelectItem Value="c">@c.Type</MudSelectItem>
                            }
                        </MudSelect>
                    </MudPaper>

                    <MudStack Justify="Justify.SpaceBetween" Class="d-flex flex-column pa-4">
                        @if (Prices != null || Prices.Count == 0)
                        {
                            <MudPaper Elevation="3" Class="pa-4">
                                <MudText>Previous prices</MudText>
                                @foreach (var price in Prices)
                                {
                                    <PricePlain Price="price"/>
                                }
                            </MudPaper>
                        }
                        <MudPaper Elevation="3" Class="pa-4">
                            <MudText>Set/Update price</MudText>
                            <MudStack Row="true" AlignItems="AlignItems.Baseline">
                                <MudTextField Variant="Variant.Outlined" InputType="InputType.Text" Label="Price before discount" @bind-Value="@(Value.Price.Value)" For="@(() => Value.Price.Value)"/>
                                <MudTextField Variant="Variant.Outlined" InputType="InputType.Text" Label="Discount" @bind-Value="@(Value.Price.Discount)" For="@(() => Value.Price.Discount)"/>
                                <MudTextField Variant="Variant.Outlined" InputType="InputType.Text" ReadOnly="true" Label="Total price" Value="@totalPrice"/>
                                <MudButton Color="Color.Success" Variant="Variant.Outlined" OnClick="UpdatePrice">Update</MudButton>
                            </MudStack>
                        </MudPaper>
                    </MudStack>
                </MudStack>

            </MudForm>
            <ProductInventory Shops="Shops" ProductAmount="ProductAmount"/>
        </MudStack>
        @if (!IsValid)
        {
            <MudPaper Class="pa-2 mx-4">
                @foreach (var error in Errors)
                {
                    <MudText Color="@Color.Error" Class="mx-2">@error</MudText>
                }
            </MudPaper>
        }
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="@Color.Secondary" Variant="Variant.Filled" OnClick="Submit">@ActionText</MudButton>
    </DialogActions>
</MudDialog>

@code {

    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }

    [CascadingParameter]
    public AppState AppState { get; set; }

    [Parameter]
    public ProductCard? Product { get; set; }

    [Parameter]
    public List<Vendor>? Vendors { get; set; }

    [Parameter]
    public List<Category>? Categories { get; set; }

    [Parameter]
    public List<Price>? Prices { get; set; }

    [Parameter]
    public List<Shop> Shops { get; set; }

    [Parameter]
    public ProductAmount? ProductAmount { get; set; }

    [Parameter]
    public string ActionText { get; set; }

    ProductCardMutable Value { get; set; }
    private PriceMutable SavedPrice;

    double totalPrice => Value.Price.ApplyDiscount();

    private bool IsValid { get; set; }
    private string[]? Errors { get; set; }

    protected override void OnParametersSet()
    {
        if (Shops == null) throw new ArgumentException(nameof(Shops));
        if (Vendors == null) throw new ArgumentException(nameof(Vendors));
        if (Categories == null) throw new ArgumentException(nameof(Categories));

        Prices ??= new List<Price>();
        if (InEditing())
        {
            Prices.Add(Product.Price);
            Value = new ProductCardMutable(Product);
        }
        else
        {
            Value = new ProductCardMutable() {Price = new PriceMutable()};
        }

        Errors ??= Array.Empty<string>();
        ProductAmount ??= new ProductAmount(Product, new Dictionary<Shop, long>());
    }

    private void UpdatePrice()
    {
        SavedPrice = Value.Price;
        Price newPrice = Price.Convert(SavedPrice);
        if (Prices.LastOrDefault() == newPrice)
            return;

    // Добавление цены только в режиме редактирования
        if (InEditing())
            Prices.Add(newPrice);
    }

    private bool InEditing() =>
        Product != null;

    private void Cancel() => MudDialog.Cancel();

    private void Submit()
    {
        Value.Price = SavedPrice;
        MudDialog.Close(ProductCard.Convert(Value));
    }
}