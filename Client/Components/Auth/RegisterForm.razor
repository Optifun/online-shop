@using OnlineShop.Core.DTO
@using System.Net
@using OnlineShop.Client.Services
@using OnlineShop.Client.Services.State
@using OnlineShop.Core

@inject ISnackbar _snackbar
@inject AppState _appState
@inject HttpClient _client
@inject CookieStorage _cookieStorage

<MudPaper>
    <MudTextField @bind-Value="Username" Label="Имя пользователя" Variant="Variant.Outlined" Margin="Margin.Dense" Error="@ErrorSign"/>

    @{
    }
    <MudTextField @bind-Value="Password" Label="Пароль"
                  Variant="Variant.Outlined"
                  Margin="Margin.Dense"
                  Error="@ErrorSign"
                  InputType="@PasswordType"
                  Adornment="Adornment.End"
                  AdornmentIcon="@VisIcon" OnAdornmentClick="ToggleVisibility"/>
    <MudTextField @bind-Value="PasswordRepeat"
                  Label="Повторите пароль"
                  Variant="Variant.Outlined"
                  Margin="Margin.Dense"
                  Error="@ErrorSign"
                  InputType="@PasswordType"
                  Adornment="Adornment.End"
                  AdornmentIcon="@VisIcon" OnAdornmentClick="ToggleVisibility"/>

    <MudText Color="Color.Error">@Error</MudText>
    <br>
    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="Register" FullWidth="true">Зарегистрироваться</MudButton>
</MudPaper>

@code {

    [Parameter]
    public EventCallback<bool> OnRegister { get; set; }

    private string Username { get; set; }
    private string Password { get; set; }
    private string PasswordRepeat { get; set; }

    private bool ErrorSign { get; set; } = false;
    private string Error { get; set; } = "";

    bool passwordVisible = false;
    string VisIcon { get; set; }
    InputType PasswordType { get; set; }

    async Task Register()
    {
        if (Username == "" || Password == "" || PasswordRepeat == "")
        {
            await SignalError("Заполните пустые поля");
            return;
        }

        if (PasswordRepeat != Password)
        {
            await SignalError("Пароли не совпадают");
            return;
        }

        UserCredentials userCredentials = new(Username, Password);
        var response = await _client.PostAsJsonAsync("api/Auth", userCredentials);

        if (response.StatusCode != HttpStatusCode.OK)
        {
            await SignalError("Пользователь с таким именем пользователя уже существует");
            return;
        }
        
        var token = response.Headers.WwwAuthenticate.FirstOrDefault();
        _client.DefaultRequestHeaders.Authorization = token;
        await _cookieStorage.SetCookie("_token", token.Parameter, 1);
        
        await OnRegister.InvokeAsync(true);
        _snackbar.Clear();
        _snackbar.Add("Регистрация прошла успешно", Severity.Info);
        ErrorSign = false;
    }

    private async Task SignalError(string error)
    {
        await OnRegister.InvokeAsync(false);
        Error = error;
        ErrorSign = true;
    }

    protected override void OnInitialized() =>
        SetVisibility(false);

    void ToggleVisibility() =>
        SetVisibility(!passwordVisible);

    private void SetVisibility(bool visible)
    {
        passwordVisible = visible;
        VisIcon = passwordVisible ? Icons.Material.Filled.Visibility : Icons.Material.Filled.VisibilityOff;
        PasswordType = passwordVisible ? InputType.Text : InputType.Password;
    }

}