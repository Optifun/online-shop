@using OnlineShop.Client.Services
@using OnlineShop.Client.Services.State
@using OnlineShop.Client.Components.Auth
@using System.Net.Http.Headers
@using System.Net
@using OnlineShop.Core.DTO

@inject IDialogService _dialogService
@inject ISnackbar _snackBar
@inject HttpClient _httpClient
@inject CookieStorage _cookieStorage
@inject Navigation _navigationManager
@inject AppState _appState

<MudThemeProvider/>
<MudDialogProvider/>
<MudSnackbarProvider/>

<CascadingValue Value="@_appState">
    <Router AppAssembly="@typeof(App).Assembly" PreferExactMatches="@true" OnNavigateAsync="OnNavigateAsync">
        <Found Context="routeData">
            <RouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)"/>
            @* <FocusOnNavigate RouteData="@routeData" Selector="h1"/> *@
        </Found>
        <NotFound>
            <PageTitle>Not found</PageTitle>
            <LayoutView Layout="@typeof(MainLayout)">
                <p role="alert">Sorry, there's nothing at this address.</p>
            </LayoutView>
        </NotFound>
    </Router>
</CascadingValue>

@code{

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine($"Initial User state = {_appState?.UserState}");
        string token = await _cookieStorage.GetCookie<string>("_token");

        if (token == "")
            Console.WriteLine($"Token was not found on startup");
        else
        {
            _httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
            var responseMessage = await _httpClient.GetAsync("api/Auth/GetUserInfo");

            if (responseMessage.StatusCode == HttpStatusCode.OK)
            {
                var userState = await responseMessage.Content.ReadFromJsonAsync<UserData>();
                _appState?.SetUserState(new UserState() {Admin = userState.IsAdmin, UserName = userState.Name});
            }
            Console.WriteLine($"Fetch User state = {_appState?.UserState}");
        }
    }


    private async Task OnNavigateAsync(NavigationContext context)
    {
        if (context.Path.Contains("/admin/"))
        {
            if (_appState.UserState == null)
            {
                AbortNavigation();
                _dialogService.Show<AuthDialog>();
                return;
            }

            if (_appState.UserState.Admin)
                return;

            AbortNavigation();
            _snackBar.Add("You are not authorized to access this page", Severity.Error);
        }
    }

    private void AbortNavigation()
    {
        if (_navigationManager.CanNavigateBack)
            _navigationManager.NavigateBack();
        else
            _navigationManager.NavigateTo("/main");
    }

}